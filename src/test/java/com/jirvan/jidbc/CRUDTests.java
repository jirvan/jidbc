package com.jirvan.jidbc;


import org.testng.annotations.*;

public class CRUDTests extends TestsBase {


    @Test
    public void insertWithExplicitId() {


        // Open a new database connection and do the insert
        long newDepartmentId;
        JidbcConnection jidbc = JidbcConnection.from(DATA_SOURCE);
        try {

            Department department = new Department();
            department.departmentId = jidbc.takeSequenceNextVal("common_id_sequence");
            department.departmentAbbr = DEPARTMENT1.departmentAbbr;
            department.departmentName = DEPARTMENT1.departmentName;
            department.thingyType = DEPARTMENT1.thingyType;
            department.thingyNumber = DEPARTMENT1.thingyNumber;
            department.anotherThingy = DEPARTMENT1.anotherThingy;
            department.inactivatedDatetime = DEPARTMENT1.inactivatedDatetime;
            jidbc.insert(department);
            newDepartmentId = department.departmentId;

        } finally {
            jidbc.release();
        }

        // Re-open the database connection and check the inserted row
        retrieveFromDatabaseAndAssertAttributeValuesAreEqualToAttributesOf(newDepartmentId, DEPARTMENT1);

    }

    @Test
    public void insertWithExplicitId_gettersAndSetters() {


        // Open a new database connection and do the insert
        long newDepartmentId;
        JidbcConnection jidbc = JidbcConnection.from(DATA_SOURCE);
        try {

            GetterSetterDepartment department = new GetterSetterDepartment();
            department.setDepartmentId(jidbc.takeSequenceNextVal("common_id_sequence"));
            department.setDepartmentAbbr(DEPARTMENT1.departmentAbbr);
            department.setDepartmentName(DEPARTMENT1.departmentName);
            department.setThingyType(DEPARTMENT1.thingyType);
            department.setThingyNumber(DEPARTMENT1.thingyNumber);
            department.setAnotherThingy(DEPARTMENT1.anotherThingy);
            department.setInactivatedDatetime(DEPARTMENT1.inactivatedDatetime);
            jidbc.insert(department);
            newDepartmentId = department.getDepartmentId();

        } finally {
            jidbc.release();
        }

        // Re-open the database connection and check the inserted row
        retrieveFromDatabaseAndAssertAttributeValuesAreEqualToAttributesOf(newDepartmentId, GETTER_SETTER_DEPARTMENT1);

    }

    @Test
    public void insertWithAutoGeneratedId() {


        // Open a new database connection and do the insert
        long newDepartmentId;
        JidbcConnection jidbc = JidbcConnection.from(DATA_SOURCE);
        try {

            Department department = new Department();
            department.departmentAbbr = DEPARTMENT1.departmentAbbr;
            department.departmentName = DEPARTMENT1.departmentName;
            department.thingyType = DEPARTMENT1.thingyType;
            department.thingyNumber = DEPARTMENT1.thingyNumber;
            department.anotherThingy = DEPARTMENT1.anotherThingy;
            department.inactivatedDatetime = DEPARTMENT1.inactivatedDatetime;
            jidbc.insert(department);
            newDepartmentId = department.departmentId;

        } finally {
            jidbc.release();
        }

        // Re-open the database connection and check the inserted row
        retrieveFromDatabaseAndAssertAttributeValuesAreEqualToAttributesOf(newDepartmentId, DEPARTMENT1);

    }

//    public void test_insert_explicitPk() {
//
//        // Open a new database connection and do the insert
//        long id;
//        DbConnection conn1 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = new Department();
//            department.departmentId = DEPARTMENT2_ID;
//            department.departmentAbbr = DEPARTMENT2_ABBR;
//            department.departmentName = DEPARTMENT2_NAME;
//            department.thingyType = "Strawberry";
//            department.thingyNumber = 42;
//            department.anotherThingy = BigDecimal.valueOf(42);
//            department.inactivatedDatetime = DEPARTMENT2_INACTIVATED_DATETIME;
//            id = department.insert(conn1);
//
//            // Check the returned ID
//            assertEquals("returned ID", DEPARTMENT2_ID, id);
//
//        } finally {
//            conn1.release();
//        }
//
//        // Re-open the database connection and check the inserted row
//        DbConnection conn2 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = Department.fetch(conn2, id);
//            assertEquals("department.department_abbr", DEPARTMENT2_ABBR, department.departmentAbbr);
//            assertEquals("department.department_name", DEPARTMENT2_NAME, department.departmentName);
//            assertEquals("department.inactivated_datetime", DEPARTMENT2_INACTIVATED_DATETIME, department.inactivatedDatetime);
//
//        } finally {
//            conn2.release();
//        }
//
//    }
//
//    public void test_fetch() {
//
//        // Open a new connection and insert a test row
//        DbConnection conn1 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = new Department();
//            department.departmentId = DEPARTMENT3_ID;
//            department.departmentAbbr = DEPARTMENT3_ABBR;
//            department.departmentName = DEPARTMENT3_NAME;
//            department.thingyType = "Strawberry";
//            department.thingyNumber = 42;
//            department.anotherThingy = BigDecimal.valueOf(42);
//            department.inactivatedDatetime = DEPARTMENT3_INACTIVATED_DATETIME;
//            department.insert(conn1);
//
//        } finally {
//            conn1.release();
//        }
//
//        // Re-connect to the database and test the fetch method
//        DbConnection conn2 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = Department.fetch(conn2, DEPARTMENT3_ID);
//            assertEquals("department.department_id", DEPARTMENT3_ID, (long) department.departmentId);
//            assertEquals("department.department_abbr", DEPARTMENT3_ABBR, department.departmentAbbr);
//            assertEquals("department.department_name", DEPARTMENT3_NAME, department.departmentName);
//            assertEquals("department.inactivated_datetime", DEPARTMENT3_INACTIVATED_DATETIME, department.inactivatedDatetime);
//
//        } finally {
//            conn2.release();
//        }
//
//    }
//
//    public void test_update() {
//
//        // Open a new connection and insert a test row
//        DbConnection conn1 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = new Department();
//            department.departmentId = DEPARTMENT3_ID;
//            department.departmentAbbr = DEPARTMENT3_ABBR;
//            department.departmentName = DEPARTMENT3_NAME;
//            department.thingyType = "Strawberry";
//            department.thingyNumber = 42;
//            department.anotherThingy = BigDecimal.valueOf(42);
//            department.inactivatedDatetime = DEPARTMENT3_INACTIVATED_DATETIME;
//            department.insert(conn1);
//
//        } finally {
//            conn1.release();
//        }
//
//        // Re-connect to the database and fetch the row and update it
//        DbConnection conn2 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = Department.fetch(conn2, DEPARTMENT3_ID);
//            department.departmentAbbr = DEPARTMENT1_ABBR;
//            department.departmentName = DEPARTMENT2_NAME;
//            department.inactivatedDatetime = DEPARTMENT1_INACTIVATED_DATETIME;
//            department.update(conn2);
//
//        } finally {
//            conn2.release();
//        }
//
//
//        // Re-open the database and check the updated row
//        DbConnection conn3 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = Department.fetch(conn3, DEPARTMENT3_ID);
//            assertEquals("department.department_id", (Long) DEPARTMENT3_ID, department.departmentId);
//            assertEquals("department.department_abbr", DEPARTMENT1_ABBR, department.departmentAbbr);
//            assertEquals("department.department_name", DEPARTMENT2_NAME, department.departmentName);
//            assertEquals("department.inactivated_datetime", DEPARTMENT1_INACTIVATED_DATETIME, department.inactivatedDatetime);
//
//        } finally {
//            conn3.release();
//        }
//
//    }
//
//
//    public void test_delete() {
//
//        // Open a new connection and insert a test row
//        DbConnection conn1 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = new Department();
//            department.departmentId = DEPARTMENT3_ID;
//            department.departmentAbbr = DEPARTMENT3_ABBR;
//            department.departmentName = DEPARTMENT3_NAME;
//            department.thingyType = "Strawberry";
//            department.thingyNumber = 42;
//            department.anotherThingy = BigDecimal.valueOf(42);
//            department.inactivatedDatetime = DEPARTMENT3_INACTIVATED_DATETIME;
//            department.insert(conn1);
//
//        } finally {
//            conn1.release();
//        }
//
//        // Re-open the database and verify the row is present
//        DbConnection conn2 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department department = Department.fetch(conn2, DEPARTMENT3_ID);
//
//        } finally {
//            conn2.release();
//        }
//
//        // Re-open the database and perform the deletion
//        DbConnection conn3 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            Department idOnlyDepartment = new Department();
//            idOnlyDepartment.departmentId = DEPARTMENT3_ID;
//            idOnlyDepartment.delete(conn3);
//
//        } finally {
//            conn3.release();
//        }
//
//        // Re-open the database and verify the row is absent
//        DbConnection conn4 = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//
//            if (Department.fetchIfExists(conn4, DEPARTMENT3_ID) != null) {
//                throw new AssertionError(String.format("Department:%d does not appear to have been deleted", DEPARTMENT3_ID));
//            }
//
//        } finally {
//            conn4.release();
//        }
//
//    }
//
//    protected void tearDown() throws Exception {
//        super.tearDown();
//        DbConnection conn = EnvironmentHelper.openConnectionToTestDatabase();
//        try {
//            conn.executeUpdate("drop table if exists departments_test_table");
//        } finally {
//            conn.release();
//        }
//    }

}

package com.jirvan.jidbc;


import com.jirvan.lang.*;
import org.testng.annotations.*;

import java.util.*;

import static org.testng.AssertJUnit.*;

public class Jidbc_CRUDTests extends TestsBase {


    @Test
    public void insertWithExplicitId() {

        // Create a new object
        long newDepartmentId = 424242l;
        Department department = new Department();
        department.departmentId = newDepartmentId;
        department.departmentType = DEPARTMENT1.DEPARTMENT_TYPE;
        department.departmentAbbr = DEPARTMENT1.DEPARTMENT_ABBR;
        department.departmentName = DEPARTMENT1.DEPARTMENT_NAME;
        department.creationAnniversary = DEPARTMENT1.CREATION_ANNIVERSARY;
        department.someMonth = DEPARTMENT1.SOME_MONTH;
        department.thingyType = DEPARTMENT1.THINGY_TYPE;
        department.thingyNumber = DEPARTMENT1.THINGY_NUMBER;
        department.anotherThingy = DEPARTMENT1.ANOTHER_THINGY;
        department.inactivatedDatetime = DEPARTMENT1.INACTIVATED_DATETIME;

        // Insert the object
        Jidbc.insert(DATA_SOURCE, department);

        // Re-open the database connection and check the inserted row
        retrieveFromDatabaseAndAssertAttributeValuesAreEqualToDepartment1(newDepartmentId);

    }

    @Test
    public void insertWithExplicitId_gettersAndSetters() {

        // Create a new object
        long newDepartmentId = 424242l;
        GetterSetterDepartment department = new GetterSetterDepartment();
        department.setDepartmentId(newDepartmentId);
        department.setDepartmentType(DEPARTMENT1.DEPARTMENT_TYPE);
        department.setDepartmentAbbr(DEPARTMENT1.DEPARTMENT_ABBR);
        department.setDepartmentName(DEPARTMENT1.DEPARTMENT_NAME);
        department.setCreationAnniversary(DEPARTMENT1.CREATION_ANNIVERSARY);
        department.setSomeMonth(DEPARTMENT1.SOME_MONTH);
        department.setThingyType(DEPARTMENT1.THINGY_TYPE);
        department.setThingyNumber(DEPARTMENT1.THINGY_NUMBER);
        department.setAnotherThingy(DEPARTMENT1.ANOTHER_THINGY);
        department.setInactivatedDatetime(DEPARTMENT1.INACTIVATED_DATETIME);

        // Insert the object
        Jidbc.insert(DATA_SOURCE, department);

        // Re-open the database connection and check the inserted row
        retrieveFromDatabaseAndAssertAttributeValuesAreEqualToGetterSetterDepartment1(newDepartmentId);

    }

    @Test
    public void insertWithAutoGeneratedId() {

        // Create a new object
        Department department = new Department();
        department.departmentType = DEPARTMENT1.DEPARTMENT_TYPE;
        department.departmentAbbr = DEPARTMENT1.DEPARTMENT_ABBR;
        department.departmentName = DEPARTMENT1.DEPARTMENT_NAME;
        department.creationAnniversary = DEPARTMENT1.CREATION_ANNIVERSARY;
        department.someMonth = DEPARTMENT1.SOME_MONTH;
        department.thingyType = DEPARTMENT1.THINGY_TYPE;
        department.thingyNumber = DEPARTMENT1.THINGY_NUMBER;
        department.anotherThingy = DEPARTMENT1.ANOTHER_THINGY;
        department.inactivatedDatetime = DEPARTMENT1.INACTIVATED_DATETIME;

        // Open a new database connection and do the insert
        Jidbc.insert(DATA_SOURCE, department);
        Long newDepartmentId = department.departmentId;

        // Re-open the database connection and check the inserted row
        retrieveFromDatabaseAndAssertAttributeValuesAreEqualToDepartment1(newDepartmentId);

    }

    @Test
    public void get() {

        // Create and insert a test row
        Department newDepartment = DEPARTMENT1.newInstance();
        Jidbc.insert(DATA_SOURCE, newDepartment);

        // Open a different  database connection and check the inserted row
        Department department = Jidbc.get(DATA_SOURCE, Department.class, newDepartment.departmentId);
        assertEquals("department.department_abbr", DEPARTMENT1.DEPARTMENT_ABBR, department.departmentAbbr);
        assertEquals("department.department_name", DEPARTMENT1.DEPARTMENT_NAME, department.departmentName);
        assertEquals("department.creation_anniversary", DEPARTMENT1.CREATION_ANNIVERSARY, department.creationAnniversary);
        assertEquals("department.thingy_type", DEPARTMENT1.THINGY_TYPE, department.thingyType);
        assertEquals("department.thingy_number", DEPARTMENT1.THINGY_NUMBER, department.thingyNumber);
        assertEquals("department.another_thingy", DEPARTMENT1.ANOTHER_THINGY, department.anotherThingy);
        assertEquals("department.inactivated_datetime", DEPARTMENT1.INACTIVATED_DATETIME, department.inactivatedDatetime);

    }


    @Test
    public void get_gettersAndSetters() {

        // Open a separate database connection and insert a test row
        GetterSetterDepartment newDepartment = DEPARTMENT1.newGetterSetterInstance();
        Jidbc.insert(DATA_SOURCE, newDepartment);

        // Open a different  database connection and check the inserted row
        GetterSetterDepartment department = Jidbc.get(DATA_SOURCE, GetterSetterDepartment.class, newDepartment.getDepartmentId());
        assertEquals("department.department_abbr", DEPARTMENT1.DEPARTMENT_ABBR, department.getDepartmentAbbr());
        assertEquals("department.department_type", DEPARTMENT1.DEPARTMENT_TYPE, department.getDepartmentType());
        assertEquals("department.department_name", DEPARTMENT1.DEPARTMENT_NAME, department.getDepartmentName());
        assertEquals("department.creation_anniversary", DEPARTMENT1.CREATION_ANNIVERSARY, department.getCreationAnniversary());
        assertEquals("department.thingy_type", DEPARTMENT1.THINGY_TYPE, department.getThingyType());
        assertEquals("department.thingy_number", DEPARTMENT1.THINGY_NUMBER, department.getThingyNumber());
        assertEquals("department.another_thingy", DEPARTMENT1.ANOTHER_THINGY, department.getAnotherThingy());
        assertEquals("department.inactivated_datetime", DEPARTMENT1.INACTIVATED_DATETIME, department.getInactivatedDatetime());

    }

    @Test
    public void getIfExists() {

        // Create and insert a test row
        Department newDepartment = DEPARTMENT3.newInstance();
        Jidbc.insert(DATA_SOURCE, newDepartment);

        // Check the inserted row is found
        assertNotNull(String.format("Expected Department:%d to exist", DEPARTMENT3.DEPARTMENT_ID), Jidbc.getIfExists(DATA_SOURCE, Department.class, DEPARTMENT3.DEPARTMENT_ID));

        // Check non-existent row is not found
        assertNull(String.format("Expected Department:%d not to exist", 575757l), Jidbc.getIfExists(DATA_SOURCE, Department.class, 575757l));

    }

    @Test
    public void update() {

        // Open a separate database connection and insert test rows
        Jidbc.insert(DATA_SOURCE, DEPARTMENT3.newInstance());
        Jidbc.insert(DATA_SOURCE, DEPARTMENT2.newInstance());

        // Fetch the row and update it
        Department departmentToUpdate = Jidbc.get(DATA_SOURCE, Department.class, DEPARTMENT3.DEPARTMENT_ID);
        departmentToUpdate.departmentAbbr = "Zac";
        departmentToUpdate.departmentName = "Zac's Department";
        departmentToUpdate.inactivatedDatetime = new GregorianCalendar(2009, 8, 14).getTime();
        Jidbc.update(DATA_SOURCE, departmentToUpdate);


        // Check the updated row and that at least one other row has not been updated
        Department updatedDepartment = Jidbc.get(DATA_SOURCE, Department.class, DEPARTMENT3.DEPARTMENT_ID);
        assertEquals("department.department_id", DEPARTMENT3.DEPARTMENT_ID, updatedDepartment.departmentId);
        assertEquals("department.department_abbr", "Zac", updatedDepartment.departmentAbbr);
        assertEquals("department.department_name", "Zac's Department", updatedDepartment.departmentName);
        assertEquals("department.inactivated_datetime", new GregorianCalendar(2009, 8, 14).getTime(), updatedDepartment.inactivatedDatetime);

        Department anotherDepartment = Jidbc.get(DATA_SOURCE, Department.class, DEPARTMENT2.DEPARTMENT_ID);
        assertEquals("department.department_id", DEPARTMENT2.DEPARTMENT_ID, anotherDepartment.departmentId);
        assertEquals("department.department_abbr", DEPARTMENT2.DEPARTMENT_ABBR, anotherDepartment.departmentAbbr);
        assertEquals("department.department_name", DEPARTMENT2.DEPARTMENT_NAME, anotherDepartment.departmentName);
        assertEquals("department.inactivated_datetime", DEPARTMENT2.INACTIVATED_DATETIME, anotherDepartment.inactivatedDatetime);

    }

    @Test
    public void save_update() {

        // Open a separate database connection and insert test rows
        Jidbc.insert(DATA_SOURCE, DEPARTMENT3.newInstance());
        Jidbc.insert(DATA_SOURCE, DEPARTMENT2.newInstance());

        // Fetch the row and update it
        Department departmentToUpdate = Jidbc.get(DATA_SOURCE, Department.class, DEPARTMENT3.DEPARTMENT_ID);
        departmentToUpdate.departmentAbbr = "Zac";
        departmentToUpdate.departmentName = "Zac's Department";
        departmentToUpdate.inactivatedDatetime = new GregorianCalendar(2009, 8, 14).getTime();
        Jidbc.save(DATA_SOURCE, departmentToUpdate);


        // Check the updated row and that at least one other row has not been updated
        Department updatedDepartment = Jidbc.get(DATA_SOURCE, Department.class, DEPARTMENT3.DEPARTMENT_ID);
        assertEquals("department.department_id", DEPARTMENT3.DEPARTMENT_ID, updatedDepartment.departmentId);
        assertEquals("department.department_abbr", "Zac", updatedDepartment.departmentAbbr);
        assertEquals("department.department_name", "Zac's Department", updatedDepartment.departmentName);
        assertEquals("department.inactivated_datetime", new GregorianCalendar(2009, 8, 14).getTime(), updatedDepartment.inactivatedDatetime);

        Department anotherDepartment = Jidbc.get(DATA_SOURCE, Department.class, DEPARTMENT2.DEPARTMENT_ID);
        assertEquals("department.department_id", DEPARTMENT2.DEPARTMENT_ID, anotherDepartment.departmentId);
        assertEquals("department.department_abbr", DEPARTMENT2.DEPARTMENT_ABBR, anotherDepartment.departmentAbbr);
        assertEquals("department.department_name", DEPARTMENT2.DEPARTMENT_NAME, anotherDepartment.departmentName);
        assertEquals("department.inactivated_datetime", DEPARTMENT2.INACTIVATED_DATETIME, anotherDepartment.inactivatedDatetime);

    }

    @Test
    public void delete() {

        // Create and insert a test row
        Jidbc.insert(DATA_SOURCE, DEPARTMENT3.newInstance());

        // Verify the row is present
        Jidbc.get(DATA_SOURCE, Department.class, DEPARTMENT3.DEPARTMENT_ID);

        // Perform the deletion
        Department idOnlyDepartment = new Department();
        idOnlyDepartment.departmentId = DEPARTMENT3.DEPARTMENT_ID;
        Jidbc.delete(DATA_SOURCE, idOnlyDepartment);

        // Verify the row is absent
        assertNull(String.format("Department:%d does not appear to have been deleted", DEPARTMENT3.DEPARTMENT_ID), Jidbc.getIfExists(DATA_SOURCE, Department.class, DEPARTMENT3.DEPARTMENT_ID));

        // Attempt to delete (the now) non-existent row and check exception
        try {
            Jidbc.delete(DATA_SOURCE, idOnlyDepartment);
            fail("Expected NotFoundRuntimeException");
        } catch (NotFoundRuntimeException e) {
        }

    }


}
